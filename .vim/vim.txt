http://www.ibm.com/developerworks/cn/linux/l-vim-script-5/
http://code.google.com/p/vimcolorschemetest/

:0put=range(1,100)  insert from line 0
:for i in range(1,99)|put='192.168.1.'.i|endfor

gv
:w !sudo tee %
g<C-g>              Prints the current position of the cursor in five ways:
                    Columnu, Line, Word, Charcter and Byte.
1<C-g>
:=                  Print the last line number
:tab ball
:only
:ju[mps]
autocmd VimResized * exe "normal \<C-W>="
g, g;               Go to [count] newer / older cursor position in change list.
g0 g^ g$

zj, zk

:%!xxd

*cmdline-editing*
CTRL-B              =<Home>
CTRL-E              =<End>
CTRL-H              =<BS>
CTRL-W              delete the word before the cursor
CTRL-U              remove all characters between the cursor position and the
                    beginning of the line.
CTRL-R CTRL-F       filename under the cursor
CTRL-R CTRL-P       filename under the curso, expanded width 'path' as in gf
CTRL-R CTRL-W       the Word under the cursor
CTRL-R CTRL-A       the WORD under the cursor; see |WORD|
CTRL-C              quit command-line without executing


ls | vim -
vim -r  List swap files and exit, *recover*
:args *.vim
:argdo {cmd}

*multi-repeat*
:[range]g[lobal]/{pattern}/[cmd]
                    *:global*
:[range]g[lobal]!/{pattern}/[cmd]
:[range]v[global]/{pattern}/[cmd]

*buffer-hidden*
:ls[!]              *:ls*
:[N]b[uffer][!] [N]
:[N]b[uffer][!] {bufname}
                    *:buffer*
:[N]bn[ext][!] [N]  *:bnext*
:[N]bp[revious][!] [N]
                    *:bprevious*
:bf[irst]           *:bfirst*
:bl[ast]            *:blast*

'nrformats'
CTRL-A
CTRL-X

*tag-commands*
:[count]ta[g][!] {ident}
                    *:tag*  Jump to the definition of {ident}
CTRL-]
{Visual}CTRL-]
*:tselect*
*:tjump*
*:stjump*
*:tnext*
*:tprevious*
*:tfirst*
*:tlast*

*quickfix*
:cope[n]            *:copen*
:ccl[ose]           *:cclose*
:cw[indow]          *:cwindow*
:cn
:cp
:cex[pr]            *:cexpr*

*include-search*
[i / [I             Display the first / all line that contains the keyword under the
                    cursor
]i / ]I             like "[i" or "[I", but start at the current cursor position
:[range]is[earch][!] [count] [/]pattern[/]
                    *:is* *:isearch*
:[range]il[list][!] [count] [/]pattern[/]
                    *:il* *:ilist*
[ CTRL-I            Jump to the first line that contains the keyword under the
                    cursor
] CTRL-I            like "[ CTRL-I", but start at the current cursor position
CTRL-W i            Open a new window, with the cursor on the first line that
                    contains the keyword under the cursor
[d, ]d, [D, ]D, [ CTRL-D, ] CTRL-D, CTRL-W d
                    Dispaly all jump to macro definition


*ins-special-keys*
CTRL-H or <BS>      Delete the character before the cursor
CTRL-W              Delete the word before the cursor
CTRL-U              Delete all entered characters in the current line
<Tab> or CTRL-I     Insert a tab
<NL> or CTRL-J      Begin new line
<CR> or CTRL-M      Begin new line
CTRL-R  {0-9a-z"%#*+:.-=}   
                    Insert the contents of a register
CTRL-Q              Insert speical keys
CTRL-T, CTRL-D
0 CTRL-D            Delete all indent in the current line
^ CTRL-D            Delete all indent in the current line. The indent is restored in the next line.
CTRL-E / CTRL-Y     Insert the character which is below / above the cursor

*cmdline-completion*
CTRL-p              tab补全是反序遍历
CTRL-d              列表所有匹配
CTRL-l              最大限度的补全 
:history            冒号命令历史记录
:history /          搜索命令的历史记录


delete to the end ?

Upper and lowercase
ggguG   全文小写
gg=光标到文件第一个字符
gu=把选定范围全部小写
G=到文件结束

~, 3~               switch case of the character under the cursor and move the cursor to the right
g~{motion}, gu{motion}, gU{motion}      
                    switch/upper/lower case of {motion} text
gUw, guw, 3guw, gu0, gu$, guG, gugg
g~~/g~g~, guu/gugu, gUU/gUgU
                    switch/upper/lower case of current line
{Visual}~, {Visual}u, {Visual}U
                    switch/upper/lower case of hightlighted text
Notice: guG         lower case to the file end (Including current line !!!!!)


!sort
'a,'b move.         move range to the cursor

=%  format block
={motion}
gw, gq

ga / :ascii         prints the number of character under the cursor.
g8                  prints the hex value
{count}go / :go[to] [count] 
                    go the {count} byte in the buffer.
CTRL-L              redraws the screen.
:intro              show introductory flash screen.

:vie[w] [++opt] [+cmd] file
:set readonly | ro / noreadonly | noro

Automatic Completion
CTRL-n / CTRL-p     serarch forward(backward)
:set complete?


:[range]m[ove] {address}
:[range]co[py] {address}

:shell
:{range}a[ppend][!]
:{range}i{nsert][!]
:[range]r[ead] [++opt] [name]
:w[rite][!] [name]  if name is specified, new file "name" is created.
:w >> name          append to "name"
                    insert the file [name](default :current file) below the specified line(default: current line)

:[range]s[ubstiute]/{pattern}/{string}/[flags] [count]
In Visual block mode, use /\%V in the pattern to have the substitute work in the block only.
g&

flags:
c confirm each substitution yes/last/no/<Esc>/all/quit/CTRL-E/CTRL-Y
e do not issue an error message.
g replace all occurrences in the line.
i Inore case for the pattern.
I Don't ignore case for the pattern
n report the number of matches, do not actually substitute.
for more info: see *:s_flags*

:version            find out which initialization files are read.
:com[mand] {cmd}    List user-defined command that start with {cmd}
:map                list out all your current mappings
map <F6> i"++"<Esc>hi
ab[breviate] yg YangGuang

Visual mode
v / V(Visual line mode) / CTRL-v(Visual block mode)
d / D ,c / C,y / Y  
                    (upper for whole highlighted lines)
J(join the lines with spaces) / gJ (without spaces)
> / < / =           (intents the text?)
CTRL-]              jump to the difinition of the function highlighted.
K                   look up the selected text using the "man" command.
Visual block mode only:
I / A               (inserts text on each line starting at the left / right side of the block. tip:short lines for A)
c / C               (C delete text from the left edge of the block to the end of line.) 
r                   replace all the selected text with a sinle character.
> / <

:help CTRL-u        (Control character) 
 v_u                (Visual-mode commands) 
 v_b_r              (Visual block)
 i_<Esc>            (Insert-mode commands) 
 :quit              (ex-mode commands) 
 c_<Del>            (Command-line editing) 
 -t                 (Vim command arguments) 
 'textwidth'        (Options)
CTRL-]              jump to specific subjects by using tags. CTRL-T/CTRL-O jump back.

:next :prev :args :ls :rewind :last nCTRL-^    
                    editing multiple files
split mode:
CTRL-W[WSVNCO=]
CTRL-WJ, CTRL-WK,CTRL-WH,CTRL-WL
                    move current window to.

CTRL-KYe Digraphs (:digraphs)

Keyborad Macros
q{char} (@{char})   records keystrokes into the register named {char}


a{ / i{, a( / i(, a< / i<, a] / i] a' / i', a" / i"
aw,aW,iw,iW,    as/is(sentence), ap/ip(paragraph), ab/ib(block)
at, it -            whole tag block or just text inside (HTML and XML tags)
d,c,y,v,>,<,gu/gU/g
also: >{ / >{

]p, ]P              paste after/before but adjust the indent


^                   the first non-blank character in the line
<CR>                first non-blank character on the next-line
-                   first non-blank character on previous line
CTRL-T,CTRL-D
gi
gd                  Go to the definition(or declaration) of the function or variable under the cursor
x delete character (3x), X = dh delete character on the left of the cursor
s / S = cc          change one line
dd                  delete a line(D,d$)
daw                 delete a word
c
:%retab
r                   replace the character under the char with {char}
R
J                   (Join)delete a line break
u Undo
CTRL-r Redo
:x,ZZ               save and exit(another command zz{Center window around the current line.}(zt,zb))
:q!                 discarding changes(ZQ)
:e!                 reload current file(:e ++enc=utf-8)
w 3w,b 3b 
e/ge                move to the next/previous end of a word
W,E,B,gE
^ / $ / 0 / * / #  (3$) move
i / I / a / A / o / O / (5a!Esc / 5iaEsc)
50%                 move percents
% matchpairs , /* C comments */
CTRL-U,CTRL-D       scroll up / down half a screen
CTRL-E,CTRL-Y       scroll up / down on line
CTRL-F,CTRL-B       scroll forward/backward a screen
CTRL-O,CTRL-I       jumps to the older/newer positions(O for older,I just next to O on the keyboard)
tabn[ext] / gt,tabp[revious] / gT,tabr[ewind],tabfir[st],tabl[ast],tabs,tabm[ove],tabd[o],tabnew ,tabe[dit],tabf[ind],tabc[lose][!],tabo[lny][!]

1、在插入模式之外"abckde"
　　基本上来说，你应该尽可能少的呆在插入模式里面，因为在插入模式里面 VIM 就像一个“哑巴”编辑器一样。很多新手都会一直呆在插入模式里面，因为这样易于使用。但 VIM 的强大之处在于他的命令行模式！你会发现，在你越来越了解 VIM 之后，你就会花越来越少的时间使用插入模式了。
2、使用 h、j、k、l

　　使用 VIM 高效率编辑的第一步，就是放弃使用箭头键。使用 VIM，你就不用频繁的在箭头键和字母键之间移来移去了，这会节省你很多时间。当你在命令模式时，你可以用 h、j、k、l 来分别实现左、下、上、右箭头的功能。一开始可能需要适应一下，但一旦习惯这种方式，你就会发现这样操作的高效之处了。
　　在你编辑你的电子邮件或者其他有段落的文本时，你可能会发现使用方向键和你预期的效果不一样，有时候可能会一次跳过了很多行。这是因为你的段落在 VIM 看来是一个大的长长的行。这时你可以在按 h、j、k 或者 l 之前键入一个 g，这样 VIM 就会按屏幕上面的行如你所愿的移动了。
3、在当前行里面有效的移动光标

　　很多编辑器只提供了简单的命令来控制光标的移动（比如左、上、右、下、到行首/尾等）。VIM 则提供了很多强大的命令来满足你控制光标的欲望。当光标从一点移动到另外一点，在这两点之间的文本（包括这两个点）称作被“跨过”，这里的命令也被称作是 motion。（简单说明一下，后面会用到这个重要的概念）
4、常用到的一些命令（motion）

　　fx：移动光标到当前行的下一个 x 处。很明显，x 可以是任意一个字母，而且你可以使用 ; 来重复你的上一个 f 命令。(3fl)
　　tx：和上面的命令类似，但是是移动到 x 的左边一个位置。(Tx)（这真的很有用）
　　Fx：和 fx 类似，不过是往回找。
(These four commands can be repeated with ";".  "," repeats in the other direction.  The cursor is never moved to another line. )
　　w：光标往前移动一个词。(iskeyword)
　　b：光标往后移动一个词。
　　0：移动光标到当前行首。
　　^：移动光标到当前行的第一个字母位置。
　　$：移动光标到行尾。
　　)：移动光标到下一个句子。
　　( ：移动光标到上一个句子。
5、在整个文件里面有效移动光标

　　VIM 有很多命令，可以用来到达文件里面你想到达的地方。下面是一些在文件里面移动的命令：
　　<C-F>：向下移动一屏。
　　<C-B>：向上移动一屏。
　　G：到文件尾
　　numG：移动光标到指定的行（num）。（比如 10G 就是到第 10 行）
　　gg：到文件首
　　H：移动光标到屏幕上面
　　M：移动光标到屏幕中间
　　L：移动光标到屏幕下面
　　*：读取光标处的字符串，并且移动光标到它再次出现的地方(g*)。
　　#：和上面的类似，但是是往反方向寻找(g#)。
　　/text：从当前光标处开始搜索字符串 text，并且到达 text 出现的地方。必须使用回车来开始这个搜索命令。如果想重复上次的搜索的话，按 n(N serach backwards)。
　　？text：和上面类似，但是是反方向。
(The characters .*[]^%/\?~$ have special meanings)
(The "\>" item is a special marker that only matches at the end of a word.
Similarly "\<" only matches at the begin of a word)
(:set hlsearch / nohlsearch  | :nohlsearch)
(:set incsearch / nowrapscan )
(:set ignorecase / noignorecase, smartcase,
\c - force case-insensitive search
\C - force case-sensitive search
)

　　ma：在当前光标的位置标记一个书签，名字为 a。(lowercase:mark is to the buffer,uppercase: mark is global,your buffer will be switched to the file with the mark)(:marks)。
　　`a：just to precisely to mark a
    ('a just to the line with mark a)。
    `. and `. - jump to the line or exact location of the last modification　　
    `` , '' moves you between the last two locations
    `': move to the cursor position before doing a jump
    `[ , `] , '[ , ']  : Start/End of last change
    c`a,d'a change or delete text from cursor (line) the mark a
    =`a reformat lines from current one the one with mark a
tip: CTRL-O and CTRL-I move between positions in the full jump history


[编辑本段]高效的输入

1、使用关键词自动完成

　　VIM 有一个非常漂亮的关键词自动完成系统。这表示，你可以输入一个长词的一部分，然后按一下某个键，然后 VIM 就替你完成了这个长词的输入了。举个例子：你有一个变量名为 iAmALongAndAwkwardVarName 在你写的代码的某个地方。也许你不想每回都自己一个一个字母的去输入它。
　　使用关键词自动完成功能，你只需要输入开始几个字母（比如 iAmAL），然后按 <C-N>（按住 Ctrl，再按 N）或者 <C-P>。如果 VIM 没有给出你想要的词，继续按，直到你满意为止，VIM 会一直循环它找到的匹配的字符串。
2、聪明的进入插入模式

　　很多新手进入插入模式都只是用 i。这样当然可以进入插入模式，但通常不是那么合适，因为 VIM 提供了很多进入插入模式的命令。下面是最常用的一些：
　　i：在当前字符的左边插入
　　I：在当前行首插入
　　a：在当前字符的右边插入
　　A：在当前行尾插入
　　o：在当前行下面插入一个新行
　　O：在当前行上面插入一个新行
　　c{motion}：删除 motion 命令跨过的字符，并且进入插入模式。比如：c$，这将会删除从光标位置到行尾的字符并且进入插入模式。ct！，这会删除从光标位置到下一个叹号（但不包括），然后进入插入模式。被删除的字符被存在了剪贴板里面，并且可以再粘贴出来。
　　d{motion}：和上面差不多，但是不进入插入模式。
3、有效的移动大段的文本heheaaj

　　使用可视选择（visual selections）和合适的选择模式
　　不像最初的 VI，VIM 允许你高亮（选择）一些文本，并且进行操作。这里有三种可视选择模式：
　　v：按字符选择。经常使用的模式，所以亲自尝试一下它。
　　V：按行选择。这在你想拷贝或者移动很多行的文本的时候特别有用。
　　<C-V>：按块选择。非常强大，只在很少的编辑器中才有这样的功能。你可以选择一个矩形块，并且在这个矩形里面的文本会被高亮。
　　在选择模式的时候使用上面所述的方向键和命令（motion）。比如，vwww，会高亮光标前面的三个词。Vjj 将会高亮当前行以及下面两行。
4、在可视选择模式下剪切和拷贝

　　一旦你高亮了选区，你或许想进行一些操作：
　　y：拷贝选择的内容到剪贴板。
　　d：剪贴选择的内容到剪贴板。
　　c：剪贴选择的内容到剪贴板并且进入插入模式。
　　在非可视选择模式下剪切和拷贝
　　如果你很清楚的知道你想拷贝或者剪切什么，那你根本就不需要进入可视选择模式。这样也会节省时间：
　　d{motion}：(delete)剪切 motion 命令跨过的字符到剪贴板。比如，dw 会剪切一个词而 dfS 会将从当前光标到下一个 S 之间的字符剪切至剪贴板。
　　y{motion}：和上面类似，不过是拷贝。
　　c{motion}：(change)和 d{motion} 类似，不过最后进入插入模式。
　　dd：剪切当前行。
　　yy：拷贝当前行。
　　cc：剪切当前行并且进入插入模式。
　　D：剪切从光标位置到行尾到剪贴板。
　　Y：拷贝当前行。
　　C：和 D 类似，最后进入插入模式。
　　x：剪切当前字符到剪贴板。
　　s：和x类似，不过最后进入插入模式。
5、粘贴

　　粘贴很简单，按 p。
6、使用多重剪贴板

　　很多编辑器都只提供了一个剪贴板。VIM 有很多。剪贴板在 VIM 里面被称为寄存器（Registers）。你可以列出当前定义的所有寄存器名和它们的内容，命令为“:reg”。最好使用小写字母来作为寄存器的名称，因为大写的有些被 VIM 占用了。
　　使用寄存器的命令为双引号 “。
　　比如：我们要拷贝当前行到寄存器 k。你应该按 “kyy。（你也可以使用 V”ky。为什么这样也可以呢？）现在当前行应该已经存在了寄存器 k 里面直到你又拷贝了一些东西进入寄存器 k。现在你可以使用命令 “kp 来粘贴寄存器 k 里面的内容到你想要的位置。
7、避免重复

　　令人惊奇的 . 命令
　　在 VI 里面，输入 . (小数点符号），将会重复你输入的上一个命令。比如，你上个命令为“dw”（删除一个词），VI 将会接着再删除一个词。
8、使用数字

　　使用数字也是 VIM 强大的而且很节省时间的重要特性之一。在很多 VIM 的命令之前都可以使用一个数字，这个数字将会告诉 VIM 这个命令需要执行几次。比如：
　　3j 将会把光标向下移动三行。
　　10dd 将会删除十行。
　　y3″ 将会拷贝从当前光标到第三个出现的引号之间的内容到剪贴板。
　　数字是扩展 motion 命令作用域非常有效的方法。


Others：
using vim to compare files
1.打开了file1,再打开另一个file2比较
:[vert ]diffsplit file2
vert水平分隔窗口打开

2.
dp 将当前差异点从当前文档应用到另一文档(diff put)
do 将当前差异点从另一文档应用到当前文档(diff get)

3.展开，折叠相同文本行
zo (folding open),zO
zc (folding close),zC
zf{motion} or {Visual}zf    create a fold
zF create a fold for [count] lines
zd delete one fold at the cursor
zD delete folds cecursively at the cursor
zE eliminate all folds in the window

4.定位
[c  上一个差异点
]c  下一个差异点
:set noscrollbind
:diffupdate

split windows
打开
:sp filename
:vsp filename
保存
:wa save all files,
:qa exit 
:wqa save all files and exit

To delete every ^N from the buffer
:%s/\r//g
Delete all blank lines
:g/^$/d
:g/^\s*$/d

 vim:tw=78:ts=8:ft=help:
